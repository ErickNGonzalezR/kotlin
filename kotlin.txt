Instalar Kotlin
    Instalar en windows
        https://www.jetbrains.com/es-es/toolbox-app/

    Instalar en linux
        La instalación de IntelliJ Idea Community en Linux es muy similar a la que hicimos en Windows, 
        podemos descargar el programa directamente desde su sitio web 
        https://www.jetbrains.com/es-es/idea/download/#section=linux 
        seleccionando la opción Descargar debajo del título de Community.

        Después tenemos que extraer los archivos que se encuentran comprimidos dentro del archivo .tar.gz. 
        Una vez descomprimidos, debemos buscar la carpeta bin, dentro habrá un archivo llamado idea.sh, 
        el cual tendremos que ejecutar desde una terminal usando el comando ./idea. 
        Por último tendrás que crear los accesos directos manualmente dependiendo de la distribución de Linux 
        que utilices.

        Otra alternativa, que es la que yo te recomiendo, es descargar la Toolbox App de Jetbrains ya 
        que esta gestionará las versiones que tengas instaladas, y también te ayudará a que tus iconos 
        siempre estén funcionando de la manera adecuada. Al final es importante tener una linda estética en 
        tu sistema operativo Linux, ¿no lo crees?

        Esta la puedes descargar desde la siguiente url: https://www.jetbrains.com/es-es/toolbox-app, 
        una vez que la descargues y ejecutes solo tendrás que seleccionar qué entorno de desarrollo quieres 
        instalar. A menos que tengas una licencia de IntelliJ Idea la opción que debes seleccionar es la de 
        Community, ya que es la versión gratuita.

    Kotlin con Visual Studio Code
        Aunque en este curso vayamos a trabajar con IntelliJ, 
        ya que es el standard en la industria para trabajar con Kotlin, 
        puede que si estás empezando a programar no tengas todavía un ordenador lo suficientemente 
        potente para ejecutar IntelliJ o simplemente prefieras usar Visual Studio Code.

        En esta guía podrás configurar tu Visual Studio Code para utilizar Kotlin.

        Bajar Visual Studio Code
        Para utilizar Visual Studio Code debes ir al siguiente enlace y descargar la versión dependiendo 
        de tu sistema operativo:

        Download Visual Studio Code - Mac, Linux, Windows https://code.visualstudio.com/Download

        Instalar el plugin de Kotlin y Code Runner
        Ahora que ya has descargado Visual Studio Code, tendrás que instalar el plugin de Kotlin y 
        Code Runner para esto tienes que ir al marketplace y descargarlos.

        Enlace del Marketplace de visual studio code. https://marketplace.visualstudio.com/items?itemName=mathiasfrohlich.Kotlin

        Enlace del Marketplace de visual studio code para instalar el code runner. https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner

        Ahora puedes hacer clic derecho y ejecutar el código o presionar el botón de play en la esquina 
        superior derecha.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Estructura
    fun main(args: Array<String>) {
        println("Hello World!")
        var nombreVariable : int = 1
        val nombreVariable = 1
    }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Variables y Constantes
    Hay tipos de variables 
    - var: Es una variable que permite la lectura y escritura
    
        var nombreVariable :  = 1
    
    - val: Es una variable que permite solo la lectura, el cual el valor es asignado la primera vosz no se 
           se puede cambiar.
    
        val nombreVariable = 1
   
    - const: Se utiliza para declrar constantes y se declara fuera de la funcion 
       
        const val NombreConstante (PI)= 3.1416
        fun main(args: Array<String>) {
        }


    Cadenas de texto
        Para concatenar una cadena de texto podemos hacerlo "$primeraVariable $SegundaVariable"  
        si queremos concatenarla con espacios o primeraVariable + " " + SegundaVariable

    Tipos de variables
        var boolean = true                  (Boolean)
        var numero = 1                      (int)
        var numeroLargo = 152123132L        (Long)
        var double = 2.113                  (Double)
        var float = 2.1531f                 (Float)
        var nombre = "dfssdf"               (String)   

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Modificadores y tipos de datos

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Operaciones con los tipos de datos en Kotlin
    En Kotlin las operaciones son traducidas a funciones interiormente por el compilador. 
    La operación val tercerValor = primerValor + segundoValor es lo mismo 
    que decir tercerValor = primerValor.plus(segundoValor).

    En la siguiente tabla te voy a dejar las operaciones que vas a poder realizar con los 
    distintos tipos de datos y si te encuentras con alguno que no permita realizar esa operación 
    puedes crearla por tu cuenta. Recuerda que Kotlin te permite extender el lenguaje para aprovechar 
    estas funcionalidades.

    Operaciones más utilizadas
    
    Expresión	    Función         Se traduce a                    Operator Fun
    a + b	        c = a + b	    a.plus(b)                       public operator fun plus(other: Int): Int
    a - b	        c = a - b	    a.minus(b)                      public operator fun minus(other: Int): Int
    a * b	        c = a * b	    a.times(b)                      public operator fun times(other: Int): Int
    a / b	        a = a / b	    a.div(b)                        public operator fun div(other: Int): Int
    a % b	        c = a % b	    a.mod(b)                        public operator fun rem(other: Int): Int
    a += b          a = a + b       a.plusAssign(b)
    a -= b          a = a - b       a.minusAssign(b)
    a *= b          a = a * b       a.timesAssingn(b)
    a /= b          a = a / b       a.divAssingn(b)
    a %= b          a = a % b       a.modAssingn(b)
    a++	            c = a++	        a.inc()                         public operator fun inc(): Int
    a--             c = a--         a.dec()
    a–	            c = a–	        a.unaryMinus()                  public operator fun dec(): Int
    a+              c = a+          a.unaryPuas()
    !a              c = !a          a.not() 
    a > b	        c = a > b	    a.compareTo(b) > 0              public override operator fun compareTo(other: Int): Int
    a < b	        c = a < b	    a.compareTo(b) < 0              public override operator fun compareTo(other: Int): Int
    a >= b	        c = a >= b	    a.compareTo(b) >= 0             public override operator fun compareTo(other: Int): Int
    a <= b	        c = a <= b	    a.compareTo(b) <= 0             public override operator fun compareTo(other: Int): Int
    a != b	        c = a != b	    !(a?.equals(b)?:(b === null))   public open operator fun equals(other: Any?): Boolean
    a == b          a == b          a?.equals(b)?:(b === null)
    .
    Dependiendo del tipo de dato que tengas podrás utilizar todos o solamente algunas de estas operaciones,
    por ejemplo si tienes una variable del tipo de dato String no vas a poder dividirla, 
    a menos que tú crees esa función. Sin embargo, sí vas a poder sumar dos variables del tipo de 
    dato String para obtener el valor de dicha suma.

    Con esto espero que hayas obtenido una idea sobre cómo funcionan las operaciones, 
    queda de parte de ti si prefieres utilizar la versión larga del operator fun o el operador directamente.

    Ten en cuenta que si las operator fun se inventaron para que puedas reducir tu 
    código a operaciones con símbolos ¿por algo será, no?

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Para imprimir por consola 
    println("Hello World!")
    println(nombreVariable)

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Programacion funcional 
    - Es un paradigma de programacion declarativo
    - Expresa la logica de un programa de describir lo que hace
    - Se enfoca en lo que ek program debe hacer no en como lo hace

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Estructuras de control if
    if(nombreVariable.isNotEmpty){
        println("El largo de la variable es: ${nombre.length}")
    } else {
        println("Error, La variable esta vacia")
    }

    val mensaje : String = if (nombre.length > 4 ){
        "tu variable es muy larga"
    } else if(nombre.idEmpty()){
        "Variable vacia"
    }else {
        "tienes un nombre corto"
    }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Estructuras de control when
    Es similar al switch de java en su vercion corta
    
    val nombreVariable = "verde"
    when (nombreVariable){
        "verde"             -> println("el color es verde")
        "amarillo"          -> println("el color es amarillo")
        "rojo","carmesi"    ->println("el color es de la escala de rojos")
        else                -> println("Error, vuelva a escribir el color")
    }

    val code = 200
    when (nombreVariable){
        int 200..299    -> println("el valor esta entre 200 y 299")
        int 300..400    -> println("el valor esta entre 300 y 400")
        int 400..500    ->println("Algo ha fallado")
        else                -> println("Error, el valor no esta en rango")

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bucles while y do while

    var contador = 10
    while(contador > 0){
        println( "El valor del contador es $contador")
        contador--

    }

    do{
        println("Generando numero aleatorio")
        val numeroAleatorio = (0..10).random
        println (el numero aleatorio es $numeroAleatorio)
    }while(numeroAleatorio > 50)

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bucles For
    val numeroLista = listof( 1 , 2, 2, 1 ,2,1 )                                # crea una lista con listof
    
    for (numero in 0..100){
        println(" El numero esta en el rango ")
    }

    for (numero in 0..100)println(" El numero esta en el rango ")

    numeroLista.foreach {numero -> println ("dfsd") }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////